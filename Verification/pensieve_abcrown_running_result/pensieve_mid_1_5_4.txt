Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: matrix
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  show_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: false
  csv_name: null
  results_file: out.txt
  root_path: ''
  deterministic_opt: false
model:
  name: null
  path: null
  onnx_path: ../Benchmarks/onnx/pensieve_mid_simple.onnx
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: '''Reshape'': ''fix_batch_size'': True'
  input_shape: [-1, 6, 8]
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: ../Benchmarks/vnnlib/pensieve_1_5_4.vnnlib
  vnnlib_path_prefix: ''
solver:
  batch_size: 1
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  real_loss: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: null
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 50
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
    alpha_masks: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: sb
    candidates: 3
    reduceop: min
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    sort_domain_interval: -1
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sb_coeff_thresh: 0.1
    nonlinear_split:
      method: shortcut
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      filter: false
      filter_beta: false
      filter_batch_size: 10000
      filter_iterations: 25
      faster: false
      loose_tanh_threshold: null
      batch_size: 51200
      shortlist_size: 500
    new_input_split:
      enable: false
      batch_size: 2
      rounds: 1
      init_alpha_batch_size: 8192
      full_alpha: false
    input_split:
      enable: true
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_primary_spec: null
      sb_primary_spec_iter: 1
      sb_sum: false
      ibp_enhancement: false
      alpha_enhancement: null
      alpha_enhancement_batch: 2048
      qp_enhancement: null
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  include_output_constraint: false

Experiments at Tue Oct  3 00:48:47 2023 on Yak
Internal results will be saved to out.txt.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx ../Benchmarks/onnx/pensieve_mid_simple.onnx
Using vnnlib ../Benchmarks/vnnlib/pensieve_1_5_4.vnnlib
Precompiled vnnlib file found at ../Benchmarks/vnnlib/pensieve_1_5_4.vnnlib.compiled
Loading onnx ../Benchmarks/onnx/pensieve_mid_simple.onnx wih quirks {'Reshape': {'fix_batch_size': True}}
Enabling quirks for Reshape operation: fix the first dimension shape to be -1 to support batchsize != 1.
input shape torch.Size([1, 128, 5]), new shape is tensor([ -1, 640]).
Enabling quirks for Reshape operation: fix the first dimension shape to be -1 to support batchsize != 1.
input shape torch.Size([1, 128, 5]), new shape is tensor([ -1, 640]).
Enabling quirks for Reshape operation: fix the first dimension shape to be -1 to support batchsize != 1.
input shape torch.Size([1, 128, 3]), new shape is tensor([ -1, 384]).
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.07500000298023224, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 57.39926910,  87.73880768,  92.58993530, 103.94731903,  78.38729858,
          75.18844604]], device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 58.22870255,  86.91474915,  91.49915314, 101.29437256,  77.18958282,
           73.88832855]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[28.68604660, 33.27045059, 43.06567001, 18.96088028, 15.65962601]]],
       device='cuda:0')
number of violation:  0
Attack finished in 1.3211 seconds.
PGD attack failed
Total VNNLIB file length: 1, max property batch size: 1, total number of batches: 1

Properties batch 0, size 1
Remaining timeout: 356.78961539268494
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  0.,  1.,  0.,  0.,  0.],
         [-1.,  0.,  0.,  1.,  0.,  0.],
         [-1.,  0.,  0.,  0.,  1.,  0.],
         [-1.,  0.,  0.,  0.,  0.,  1.]]], dtype=torch.float64)
thresholds: tensor([0., 0., 0., 0., 0.], device='cuda:0') ######
Model prediction is: tensor([ 57.39926910,  87.73880768,  92.58992767, 103.94731903,  78.38729858,
         75.18844604], device='cuda:0')
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/shape.1): BoundBuffers(name=/shape.1, inputs=[], perturbed=False)
  (/19): BoundParams(name=/19, inputs=[], perturbed=False)
  (/20): BoundParams(name=/20, inputs=[], perturbed=False)
  (/25): BoundParams(name=/25, inputs=[], perturbed=False)
  (/26): BoundParams(name=/26, inputs=[], perturbed=False)
  (/31): BoundParams(name=/31, inputs=[], perturbed=False)
  (/32): BoundParams(name=/32, inputs=[], perturbed=False)
  (/37): BoundParams(name=/37, inputs=[], perturbed=False)
  (/38): BoundParams(name=/38, inputs=[], perturbed=False)
  (/47): BoundParams(name=/47, inputs=[], perturbed=False)
  (/48): BoundParams(name=/48, inputs=[], perturbed=False)
  (/49): BoundParams(name=/49, inputs=[], perturbed=False)
  (/50): BoundParams(name=/50, inputs=[], perturbed=False)
  (/shape.3): BoundBuffers(name=/shape.3, inputs=[], perturbed=False)
  (/shape.5): BoundBuffers(name=/shape.5, inputs=[], perturbed=False)
  (/shape): BoundBuffers(name=/shape, inputs=[], perturbed=False)
  (/54): BoundParams(name=/54, inputs=[], perturbed=False)
  (/55): BoundParams(name=/55, inputs=[], perturbed=False)
  (/56): BoundParams(name=/56, inputs=[], perturbed=False)
  (/57): BoundParams(name=/57, inputs=[], perturbed=False)
  (/58): BoundSplit(name=/58, inputs=[/shape.1], perturbed=False)
  (/59): BoundSplit(name=/59, inputs=[/shape.1], perturbed=False)
  (/60): BoundSplit(name=/60, inputs=[/shape.1], perturbed=False)
  (/61): BoundSqueeze(name=/61, inputs=[/58], perturbed=False)
  (/62): BoundSqueeze(name=/62, inputs=[/59], perturbed=False)
  (/63): BoundSqueeze(name=/63, inputs=[/60], perturbed=False)
  (/64): BoundUnsqueeze(name=/64, inputs=[/61], perturbed=False)
  (/65): BoundUnsqueeze(name=/65, inputs=[/62], perturbed=False)
  (/66): BoundUnsqueeze(name=/66, inputs=[/63], perturbed=False)
  (/67): BoundConcat(name=/67, inputs=[/64, /65, /66], perturbed=False)
  (/68): BoundReshape(name=/68, inputs=[/0, /67], perturbed=True)
  (/69): BoundConstant(name=/69, value=1)
  (/70): BoundConstant(name=/70, value=0)
  (/71): BoundConstant(name=/71, value=0)
  (/72): BoundConstant(name=/72, value=1)
  (/73): BoundAdd(name=/73, inputs=[/71, /72], perturbed=False)
  (/74): BoundUnsqueeze(name=/74, inputs=[/70], perturbed=False)
  (/75): BoundUnsqueeze(name=/75, inputs=[/73], perturbed=False)
  (/76): BoundUnsqueeze(name=/76, inputs=[/69], perturbed=False)
  (/77): BoundSlice(name=/77, inputs=[/68, /74, /75, /76], perturbed=True)
  (/78): BoundShape(name=/78, inputs=[/77], perturbed=False)
  (/79): BoundConstant(name=/79, value=2)
  (/80): BoundGather(name=/80, inputs=[/78, /79], perturbed=False)
  (/81): BoundConstant(name=/81, value=1)
  (/82): BoundSub(name=/82, inputs=[/80, /81], perturbed=False)
  (/83): BoundCast(name=/83, inputs=[/82], perturbed=False)
  (/84): BoundConstant(name=/84, value=tensor([1], device='cuda:0'))
  (/85): BoundReshape(name=/85, inputs=[/83, /84], perturbed=False)
  (/86): BoundCast(name=/86, inputs=[/85], perturbed=False)
  (/87): BoundGather(name=/87, inputs=[/77, /86], perturbed=True)
  (/88): BoundSqueeze(name=/88, inputs=[/87], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/88, /19, /20], perturbed=True)
  (/90): BoundRelu(name=/90, inputs=[/input], perturbed=True)
  (/91): BoundConstant(name=/91, value=1)
  (/92): BoundConstant(name=/92, value=1)
  (/93): BoundConstant(name=/93, value=1)
  (/94): BoundConstant(name=/94, value=1)
  (/95): BoundAdd(name=/95, inputs=[/93, /94], perturbed=False)
  (/96): BoundUnsqueeze(name=/96, inputs=[/92], perturbed=False)
  (/97): BoundUnsqueeze(name=/97, inputs=[/95], perturbed=False)
  (/98): BoundUnsqueeze(name=/98, inputs=[/91], perturbed=False)
  (/99): BoundSlice(name=/99, inputs=[/68, /96, /97, /98], perturbed=True)
  (/100): BoundShape(name=/100, inputs=[/99], perturbed=False)
  (/101): BoundConstant(name=/101, value=2)
  (/102): BoundGather(name=/102, inputs=[/100, /101], perturbed=False)
  (/103): BoundConstant(name=/103, value=1)
  (/104): BoundSub(name=/104, inputs=[/102, /103], perturbed=False)
  (/105): BoundCast(name=/105, inputs=[/104], perturbed=False)
  (/106): BoundConstant(name=/106, value=tensor([1], device='cuda:0'))
  (/107): BoundReshape(name=/107, inputs=[/105, /106], perturbed=False)
  (/108): BoundCast(name=/108, inputs=[/107], perturbed=False)
  (/109): BoundGather(name=/109, inputs=[/99, /108], perturbed=True)
  (/110): BoundSqueeze(name=/110, inputs=[/109], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/110, /25, /26], perturbed=True)
  (/112): BoundRelu(name=/112, inputs=[/input.3], perturbed=True)
  (/113): BoundConstant(name=/113, value=1)
  (/114): BoundConstant(name=/114, value=2)
  (/115): BoundConstant(name=/115, value=2)
  (/116): BoundConstant(name=/116, value=1)
  (/117): BoundAdd(name=/117, inputs=[/115, /116], perturbed=False)
  (/118): BoundUnsqueeze(name=/118, inputs=[/114], perturbed=False)
  (/119): BoundUnsqueeze(name=/119, inputs=[/117], perturbed=False)
  (/120): BoundUnsqueeze(name=/120, inputs=[/113], perturbed=False)
  (/input.7): BoundSlice(name=/input.7, inputs=[/68, /118, /119, /120], perturbed=True)
  (/input.11): BoundConv(name=/input.11, inputs=[/input.7, /31, /32], perturbed=True)
  (/123): BoundRelu(name=/123, inputs=[/input.11], perturbed=True)
  (/124): BoundConstant(name=/124, value=1)
  (/125): BoundConstant(name=/125, value=3)
  (/126): BoundConstant(name=/126, value=3)
  (/127): BoundConstant(name=/127, value=1)
  (/128): BoundAdd(name=/128, inputs=[/126, /127], perturbed=False)
  (/129): BoundUnsqueeze(name=/129, inputs=[/125], perturbed=False)
  (/130): BoundUnsqueeze(name=/130, inputs=[/128], perturbed=False)
  (/131): BoundUnsqueeze(name=/131, inputs=[/124], perturbed=False)
  (/input.15): BoundSlice(name=/input.15, inputs=[/68, /129, /130, /131], perturbed=True)
  (/input.19): BoundConv(name=/input.19, inputs=[/input.15, /37, /38], perturbed=True)
  (/134): BoundRelu(name=/134, inputs=[/input.19], perturbed=True)
  (/135): BoundConstant(name=/135, value=1)
  (/136): BoundConstant(name=/136, value=4)
  (/137): BoundConstant(name=/137, value=4)
  (/138): BoundConstant(name=/138, value=1)
  (/139): BoundAdd(name=/139, inputs=[/137, /138], perturbed=False)
  (/140): BoundUnsqueeze(name=/140, inputs=[/136], perturbed=False)
  (/141): BoundUnsqueeze(name=/141, inputs=[/139], perturbed=False)
  (/142): BoundUnsqueeze(name=/142, inputs=[/135], perturbed=False)
  (/143): BoundSlice(name=/143, inputs=[/68, /140, /141, /142], perturbed=True)
  (/144): BoundConstant(name=/144, value=2)
  (/145): BoundConstant(name=/145, value=0)
  (/146): BoundConstant(name=/146, value=0)
  (/147): BoundConstant(name=/147, value=6)
  (/148): BoundAdd(name=/148, inputs=[/146, /147], perturbed=False)
  (/149): BoundUnsqueeze(name=/149, inputs=[/145], perturbed=False)
  (/150): BoundUnsqueeze(name=/150, inputs=[/148], perturbed=False)
  (/151): BoundUnsqueeze(name=/151, inputs=[/144], perturbed=False)
  (/input.23): BoundSlice(name=/input.23, inputs=[/143, /149, /150, /151], perturbed=True)
  (/input.27): BoundConv(name=/input.27, inputs=[/input.23, /47, /48], perturbed=True)
  (/154): BoundRelu(name=/154, inputs=[/input.27], perturbed=True)
  (/155): BoundShape(name=/155, inputs=[/143], perturbed=False)
  (/156): BoundConstant(name=/156, value=2)
  (/157): BoundGather(name=/157, inputs=[/155, /156], perturbed=False)
  (/158): BoundConstant(name=/158, value=1)
  (/159): BoundSub(name=/159, inputs=[/157, /158], perturbed=False)
  (/160): BoundCast(name=/160, inputs=[/159], perturbed=False)
  (/161): BoundConstant(name=/161, value=tensor([1], device='cuda:0'))
  (/162): BoundReshape(name=/162, inputs=[/160, /161], perturbed=False)
  (/163): BoundCast(name=/163, inputs=[/162], perturbed=False)
  (/164): BoundGather(name=/164, inputs=[/143, /163], perturbed=True)
  (/165): BoundSqueeze(name=/165, inputs=[/164], perturbed=True)
  (/166): BoundLinear(name=/166, inputs=[/165, /49, /50], perturbed=True)
  (/167): BoundSplit(name=/167, inputs=[/shape.3], perturbed=False)
  (/168): BoundSplit(name=/168, inputs=[/shape.3], perturbed=False)
  (/169): BoundSqueeze(name=/169, inputs=[/167], perturbed=False)
  (/170): BoundSqueeze(name=/170, inputs=[/168], perturbed=False)
  (/171): BoundUnsqueeze(name=/171, inputs=[/169], perturbed=False)
  (/172): BoundUnsqueeze(name=/172, inputs=[/170], perturbed=False)
  (/173): BoundConcat(name=/173, inputs=[/171, /172], perturbed=False)
  (/174): BoundReshape(name=/174, inputs=[/123, /173], perturbed=True)
  (/175): BoundSplit(name=/175, inputs=[/shape.5], perturbed=False)
  (/176): BoundSplit(name=/176, inputs=[/shape.5], perturbed=False)
  (/177): BoundSqueeze(name=/177, inputs=[/175], perturbed=False)
  (/178): BoundSqueeze(name=/178, inputs=[/176], perturbed=False)
  (/179): BoundUnsqueeze(name=/179, inputs=[/177], perturbed=False)
  (/180): BoundUnsqueeze(name=/180, inputs=[/178], perturbed=False)
  (/181): BoundConcat(name=/181, inputs=[/179, /180], perturbed=False)
  (/182): BoundReshape(name=/182, inputs=[/134, /181], perturbed=True)
  (/183): BoundSplit(name=/183, inputs=[/shape], perturbed=False)
  (/184): BoundSplit(name=/184, inputs=[/shape], perturbed=False)
  (/185): BoundSqueeze(name=/185, inputs=[/183], perturbed=False)
  (/186): BoundSqueeze(name=/186, inputs=[/184], perturbed=False)
  (/187): BoundUnsqueeze(name=/187, inputs=[/185], perturbed=False)
  (/188): BoundUnsqueeze(name=/188, inputs=[/186], perturbed=False)
  (/189): BoundConcat(name=/189, inputs=[/187, /188], perturbed=False)
  (/190): BoundReshape(name=/190, inputs=[/154, /189], perturbed=True)
  (/191): BoundConcat(name=/191, inputs=[/90, /112, /174, /182, /190, /166], perturbed=True)
  (/input.31): BoundLinear(name=/input.31, inputs=[/191, /54, /55], perturbed=True)
  (/193): BoundRelu(name=/193, inputs=[/input.31], perturbed=True)
  (/194): BoundLinear(name=/194, inputs=[/193, /56, /57], perturbed=True)
)
Split layers:
  BoundLinear(name=/input, inputs=[/88, /19, /20], perturbed=True): [(BoundRelu(name=/90, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/110, /25, /26], perturbed=True): [(BoundRelu(name=/112, inputs=[/input.3], perturbed=True), 0)]
  BoundConv(name=/input.11, inputs=[/input.7, /31, /32], perturbed=True): [(BoundRelu(name=/123, inputs=[/input.11], perturbed=True), 0)]
  BoundConv(name=/input.19, inputs=[/input.15, /37, /38], perturbed=True): [(BoundRelu(name=/134, inputs=[/input.19], perturbed=True), 0)]
  BoundConv(name=/input.27, inputs=[/input.23, /47, /48], perturbed=True): [(BoundRelu(name=/154, inputs=[/input.27], perturbed=True), 0)]
  BoundLinear(name=/input.31, inputs=[/191, /54, /55], perturbed=True): [(BoundRelu(name=/193, inputs=[/input.31], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/90, inputs=[/input], perturbed=True)
   BoundRelu(name=/112, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/123, inputs=[/input.11], perturbed=True)
   BoundRelu(name=/134, inputs=[/input.19], perturbed=True)
   BoundRelu(name=/154, inputs=[/input.27], perturbed=True)
   BoundRelu(name=/193, inputs=[/input.31], perturbed=True)
layer /90 using sparse-features alpha with shape [0]; unstable size 0; total size 128 ([1, 128])
layer /90 start_node /input.31 using sparse-spec alpha [2, 10, 1, 0] with unstable size 9 total_size 128 output_shape torch.Size([128])
layer /90 start_node /194 using full alpha [2, 5, 1, 0] with unstable size None total_size 5 output_shape 5
layer /112 using sparse-features alpha with shape [0]; unstable size 0; total size 128 ([1, 128])
layer /112 start_node /input.31 using sparse-spec alpha [2, 10, 1, 0] with unstable size 9 total_size 128 output_shape torch.Size([128])
layer /112 start_node /194 using full alpha [2, 5, 1, 0] with unstable size None total_size 5 output_shape 5
layer /123 using sparse-features alpha with shape [100]; unstable size 100; total size 640 ([1, 128, 5])
layer /123 start_node /input.31 using sparse-spec alpha [2, 10, 1, 100] with unstable size 9 total_size 128 output_shape torch.Size([128])
layer /123 start_node /194 using full alpha [2, 5, 1, 100] with unstable size None total_size 5 output_shape 5
layer /134 using sparse-features alpha with shape [305]; unstable size 305; total size 640 ([1, 128, 5])
layer /134 start_node /input.31 using sparse-spec alpha [2, 10, 1, 305] with unstable size 9 total_size 128 output_shape torch.Size([128])
layer /134 start_node /194 using full alpha [2, 5, 1, 305] with unstable size None total_size 5 output_shape 5
layer /154 using sparse-features alpha with shape [0]; unstable size 0; total size 384 ([1, 128, 3])
layer /154 start_node /input.31 using sparse-spec alpha [2, 10, 1, 0] with unstable size 9 total_size 128 output_shape torch.Size([128])
layer /154 start_node /194 using full alpha [2, 5, 1, 0] with unstable size None total_size 5 output_shape 5
layer /193 using sparse-features alpha with shape [9]; unstable size 9; total size 128 ([1, 128])
layer /193 start_node /194 using full alpha [2, 5, 1, 9] with unstable size None total_size 5 output_shape 5
Optimizable variables initialized.
initial CROWN bounds: tensor([[27.81832886, 32.33289337, 41.62464905, 18.05106163, 14.76314163]],
       device='cuda:0') None
Verified with initial CROWN!
Verified by initial bound!
Result: unsat
Time: 4.546706914901733
