Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: matrix
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  show_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: false
  csv_name: null
  results_file: out.txt
  root_path: ''
  deterministic_opt: false
model:
  name: null
  path: null
  onnx_path: ../Benchmarks/onnx/pensieve_small_simple.onnx
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: '''Reshape'': ''fix_batch_size'': True'
  input_shape: [-1, 6, 8]
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: ../Benchmarks/vnnlib/pensieve_2_6_5.vnnlib
  vnnlib_path_prefix: ''
solver:
  batch_size: 1
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  real_loss: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: null
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 50
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
    alpha_masks: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: sb
    candidates: 3
    reduceop: min
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    sort_domain_interval: -1
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sb_coeff_thresh: 0.1
    nonlinear_split:
      method: shortcut
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      filter: false
      filter_beta: false
      filter_batch_size: 10000
      filter_iterations: 25
      faster: false
      loose_tanh_threshold: null
      batch_size: 51200
      shortlist_size: 500
    new_input_split:
      enable: false
      batch_size: 2
      rounds: 1
      init_alpha_batch_size: 8192
      full_alpha: false
    input_split:
      enable: true
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_primary_spec: null
      sb_primary_spec_iter: 1
      sb_sum: false
      ibp_enhancement: false
      alpha_enhancement: null
      alpha_enhancement_batch: 2048
      qp_enhancement: null
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  include_output_constraint: false

Experiments at Tue Oct  3 01:13:54 2023 on Yak
Internal results will be saved to out.txt.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx ../Benchmarks/onnx/pensieve_small_simple.onnx
Using vnnlib ../Benchmarks/vnnlib/pensieve_2_6_5.vnnlib
48 inputs and 6 outputs in vnnlib
Loading onnx ../Benchmarks/onnx/pensieve_small_simple.onnx wih quirks {'Reshape': {'fix_batch_size': True}}
Enabling quirks for Reshape operation: fix the first dimension shape to be -1 to support batchsize != 1.
input shape torch.Size([1, 1, 128]), new shape is tensor([ -1, 128]).
Enabling quirks for Reshape operation: fix the first dimension shape to be -1 to support batchsize != 1.
input shape torch.Size([1, 1, 128]), new shape is tensor([ -1, 128]).
Enabling quirks for Reshape operation: fix the first dimension shape to be -1 to support batchsize != 1.
input shape torch.Size([1, 1, 128]), new shape is tensor([ -1, 128]).
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.08750000596046448, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[37.34973145, 34.88350296, 33.74792099, 26.40740395, 27.00849533,
         30.04712105]], device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[37.62355804, 37.59205246, 36.97811508, 31.28327751, 29.87163544,
          33.50741196]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 4.11614609,  4.08464050,  3.47070312, -2.22413445, -3.63577652]]],
       device='cuda:0')
number of violation:  2
Attack finished in 1.3052 seconds.
PGD attack failed
Total VNNLIB file length: 1, max property batch size: 1, total number of batches: 1

Properties batch 0, size 1
Remaining timeout: 356.8006274700165
##### Instance 0 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.],
         [ 0.,  1.,  0.,  0.,  0., -1.],
         [ 0.,  0.,  1.,  0.,  0., -1.],
         [ 0.,  0.,  0.,  1.,  0., -1.],
         [ 0.,  0.,  0.,  0.,  1., -1.]]], dtype=torch.float64)
thresholds: tensor([0., 0., 0., 0., 0.], device='cuda:0') ######
Model prediction is: tensor([37.34973145, 34.88350296, 33.74792099, 26.40740395, 27.00849533,
        30.04712105], device='cuda:0')
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/shape.1): BoundBuffers(name=/shape.1, inputs=[], perturbed=False)
  (/23): BoundParams(name=/23, inputs=[], perturbed=False)
  (/24): BoundParams(name=/24, inputs=[], perturbed=False)
  (/29): BoundParams(name=/29, inputs=[], perturbed=False)
  (/30): BoundParams(name=/30, inputs=[], perturbed=False)
  (/35): BoundParams(name=/35, inputs=[], perturbed=False)
  (/36): BoundParams(name=/36, inputs=[], perturbed=False)
  (/41): BoundParams(name=/41, inputs=[], perturbed=False)
  (/42): BoundParams(name=/42, inputs=[], perturbed=False)
  (/51): BoundParams(name=/51, inputs=[], perturbed=False)
  (/52): BoundParams(name=/52, inputs=[], perturbed=False)
  (/53): BoundParams(name=/53, inputs=[], perturbed=False)
  (/54): BoundParams(name=/54, inputs=[], perturbed=False)
  (/shape.3): BoundBuffers(name=/shape.3, inputs=[], perturbed=False)
  (/shape.5): BoundBuffers(name=/shape.5, inputs=[], perturbed=False)
  (/shape): BoundBuffers(name=/shape, inputs=[], perturbed=False)
  (/58): BoundParams(name=/58, inputs=[], perturbed=False)
  (/59): BoundParams(name=/59, inputs=[], perturbed=False)
  (/60): BoundParams(name=/60, inputs=[], perturbed=False)
  (/61): BoundParams(name=/61, inputs=[], perturbed=False)
  (/62): BoundSplit(name=/62, inputs=[/shape.1], perturbed=False)
  (/63): BoundSplit(name=/63, inputs=[/shape.1], perturbed=False)
  (/64): BoundSplit(name=/64, inputs=[/shape.1], perturbed=False)
  (/65): BoundSqueeze(name=/65, inputs=[/62], perturbed=False)
  (/66): BoundSqueeze(name=/66, inputs=[/63], perturbed=False)
  (/67): BoundSqueeze(name=/67, inputs=[/64], perturbed=False)
  (/68): BoundUnsqueeze(name=/68, inputs=[/65], perturbed=False)
  (/69): BoundUnsqueeze(name=/69, inputs=[/66], perturbed=False)
  (/70): BoundUnsqueeze(name=/70, inputs=[/67], perturbed=False)
  (/71): BoundConcat(name=/71, inputs=[/68, /69, /70], perturbed=False)
  (/72): BoundReshape(name=/72, inputs=[/0, /71], perturbed=True)
  (/73): BoundConstant(name=/73, value=1)
  (/74): BoundConstant(name=/74, value=0)
  (/75): BoundConstant(name=/75, value=0)
  (/76): BoundConstant(name=/76, value=1)
  (/77): BoundAdd(name=/77, inputs=[/75, /76], perturbed=False)
  (/78): BoundUnsqueeze(name=/78, inputs=[/74], perturbed=False)
  (/79): BoundUnsqueeze(name=/79, inputs=[/77], perturbed=False)
  (/80): BoundUnsqueeze(name=/80, inputs=[/73], perturbed=False)
  (/81): BoundSlice(name=/81, inputs=[/72, /78, /79, /80], perturbed=True)
  (/82): BoundShape(name=/82, inputs=[/81], perturbed=False)
  (/83): BoundConstant(name=/83, value=2)
  (/84): BoundGather(name=/84, inputs=[/82, /83], perturbed=False)
  (/85): BoundConstant(name=/85, value=1)
  (/86): BoundSub(name=/86, inputs=[/84, /85], perturbed=False)
  (/87): BoundCast(name=/87, inputs=[/86], perturbed=False)
  (/88): BoundConstant(name=/88, value=tensor([1], device='cuda:0'))
  (/89): BoundReshape(name=/89, inputs=[/87, /88], perturbed=False)
  (/90): BoundCast(name=/90, inputs=[/89], perturbed=False)
  (/91): BoundGather(name=/91, inputs=[/81, /90], perturbed=True)
  (/92): BoundSqueeze(name=/92, inputs=[/91], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/92, /23, /24], perturbed=True)
  (/94): BoundRelu(name=/94, inputs=[/input], perturbed=True)
  (/95): BoundConstant(name=/95, value=1)
  (/96): BoundConstant(name=/96, value=1)
  (/97): BoundConstant(name=/97, value=1)
  (/98): BoundConstant(name=/98, value=1)
  (/99): BoundAdd(name=/99, inputs=[/97, /98], perturbed=False)
  (/100): BoundUnsqueeze(name=/100, inputs=[/96], perturbed=False)
  (/101): BoundUnsqueeze(name=/101, inputs=[/99], perturbed=False)
  (/102): BoundUnsqueeze(name=/102, inputs=[/95], perturbed=False)
  (/103): BoundSlice(name=/103, inputs=[/72, /100, /101, /102], perturbed=True)
  (/104): BoundShape(name=/104, inputs=[/103], perturbed=False)
  (/105): BoundConstant(name=/105, value=2)
  (/106): BoundGather(name=/106, inputs=[/104, /105], perturbed=False)
  (/107): BoundConstant(name=/107, value=1)
  (/108): BoundSub(name=/108, inputs=[/106, /107], perturbed=False)
  (/109): BoundCast(name=/109, inputs=[/108], perturbed=False)
  (/110): BoundConstant(name=/110, value=tensor([1], device='cuda:0'))
  (/111): BoundReshape(name=/111, inputs=[/109, /110], perturbed=False)
  (/112): BoundCast(name=/112, inputs=[/111], perturbed=False)
  (/113): BoundGather(name=/113, inputs=[/103, /112], perturbed=True)
  (/114): BoundSqueeze(name=/114, inputs=[/113], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/114, /29, /30], perturbed=True)
  (/116): BoundRelu(name=/116, inputs=[/input.3], perturbed=True)
  (/117): BoundConstant(name=/117, value=1)
  (/118): BoundConstant(name=/118, value=2)
  (/119): BoundConstant(name=/119, value=2)
  (/120): BoundConstant(name=/120, value=1)
  (/121): BoundAdd(name=/121, inputs=[/119, /120], perturbed=False)
  (/122): BoundUnsqueeze(name=/122, inputs=[/118], perturbed=False)
  (/123): BoundUnsqueeze(name=/123, inputs=[/121], perturbed=False)
  (/124): BoundUnsqueeze(name=/124, inputs=[/117], perturbed=False)
  (/125): BoundSlice(name=/125, inputs=[/72, /122, /123, /124], perturbed=True)
  (/126): BoundTranspose(name=/126, inputs=[/35], perturbed=False)
  (/127): BoundMatMul(name=/127, inputs=[/125, /126], perturbed=True)
  (/input.7): BoundAdd(name=/input.7, inputs=[/36, /127], perturbed=True)
  (/129): BoundRelu(name=/129, inputs=[/input.7], perturbed=True)
  (/130): BoundConstant(name=/130, value=1)
  (/131): BoundConstant(name=/131, value=3)
  (/132): BoundConstant(name=/132, value=3)
  (/133): BoundConstant(name=/133, value=1)
  (/134): BoundAdd(name=/134, inputs=[/132, /133], perturbed=False)
  (/135): BoundUnsqueeze(name=/135, inputs=[/131], perturbed=False)
  (/136): BoundUnsqueeze(name=/136, inputs=[/134], perturbed=False)
  (/137): BoundUnsqueeze(name=/137, inputs=[/130], perturbed=False)
  (/138): BoundSlice(name=/138, inputs=[/72, /135, /136, /137], perturbed=True)
  (/139): BoundTranspose(name=/139, inputs=[/41], perturbed=False)
  (/140): BoundMatMul(name=/140, inputs=[/138, /139], perturbed=True)
  (/input.11): BoundAdd(name=/input.11, inputs=[/42, /140], perturbed=True)
  (/142): BoundRelu(name=/142, inputs=[/input.11], perturbed=True)
  (/143): BoundConstant(name=/143, value=1)
  (/144): BoundConstant(name=/144, value=4)
  (/145): BoundConstant(name=/145, value=4)
  (/146): BoundConstant(name=/146, value=1)
  (/147): BoundAdd(name=/147, inputs=[/145, /146], perturbed=False)
  (/148): BoundUnsqueeze(name=/148, inputs=[/144], perturbed=False)
  (/149): BoundUnsqueeze(name=/149, inputs=[/147], perturbed=False)
  (/150): BoundUnsqueeze(name=/150, inputs=[/143], perturbed=False)
  (/151): BoundSlice(name=/151, inputs=[/72, /148, /149, /150], perturbed=True)
  (/152): BoundConstant(name=/152, value=2)
  (/153): BoundConstant(name=/153, value=0)
  (/154): BoundConstant(name=/154, value=0)
  (/155): BoundConstant(name=/155, value=6)
  (/156): BoundAdd(name=/156, inputs=[/154, /155], perturbed=False)
  (/157): BoundUnsqueeze(name=/157, inputs=[/153], perturbed=False)
  (/158): BoundUnsqueeze(name=/158, inputs=[/156], perturbed=False)
  (/159): BoundUnsqueeze(name=/159, inputs=[/152], perturbed=False)
  (/160): BoundSlice(name=/160, inputs=[/151, /157, /158, /159], perturbed=True)
  (/161): BoundTranspose(name=/161, inputs=[/51], perturbed=False)
  (/162): BoundMatMul(name=/162, inputs=[/160, /161], perturbed=True)
  (/input.15): BoundAdd(name=/input.15, inputs=[/52, /162], perturbed=True)
  (/164): BoundRelu(name=/164, inputs=[/input.15], perturbed=True)
  (/165): BoundShape(name=/165, inputs=[/151], perturbed=False)
  (/166): BoundConstant(name=/166, value=2)
  (/167): BoundGather(name=/167, inputs=[/165, /166], perturbed=False)
  (/168): BoundConstant(name=/168, value=1)
  (/169): BoundSub(name=/169, inputs=[/167, /168], perturbed=False)
  (/170): BoundCast(name=/170, inputs=[/169], perturbed=False)
  (/171): BoundConstant(name=/171, value=tensor([1], device='cuda:0'))
  (/172): BoundReshape(name=/172, inputs=[/170, /171], perturbed=False)
  (/173): BoundCast(name=/173, inputs=[/172], perturbed=False)
  (/174): BoundGather(name=/174, inputs=[/151, /173], perturbed=True)
  (/175): BoundSqueeze(name=/175, inputs=[/174], perturbed=True)
  (/176): BoundLinear(name=/176, inputs=[/175, /53, /54], perturbed=True)
  (/177): BoundSplit(name=/177, inputs=[/shape.3], perturbed=False)
  (/178): BoundSplit(name=/178, inputs=[/shape.3], perturbed=False)
  (/179): BoundSqueeze(name=/179, inputs=[/177], perturbed=False)
  (/180): BoundSqueeze(name=/180, inputs=[/178], perturbed=False)
  (/181): BoundUnsqueeze(name=/181, inputs=[/179], perturbed=False)
  (/182): BoundUnsqueeze(name=/182, inputs=[/180], perturbed=False)
  (/183): BoundConcat(name=/183, inputs=[/181, /182], perturbed=False)
  (/184): BoundReshape(name=/184, inputs=[/129, /183], perturbed=True)
  (/185): BoundSplit(name=/185, inputs=[/shape.5], perturbed=False)
  (/186): BoundSplit(name=/186, inputs=[/shape.5], perturbed=False)
  (/187): BoundSqueeze(name=/187, inputs=[/185], perturbed=False)
  (/188): BoundSqueeze(name=/188, inputs=[/186], perturbed=False)
  (/189): BoundUnsqueeze(name=/189, inputs=[/187], perturbed=False)
  (/190): BoundUnsqueeze(name=/190, inputs=[/188], perturbed=False)
  (/191): BoundConcat(name=/191, inputs=[/189, /190], perturbed=False)
  (/192): BoundReshape(name=/192, inputs=[/142, /191], perturbed=True)
  (/193): BoundSplit(name=/193, inputs=[/shape], perturbed=False)
  (/194): BoundSplit(name=/194, inputs=[/shape], perturbed=False)
  (/195): BoundSqueeze(name=/195, inputs=[/193], perturbed=False)
  (/196): BoundSqueeze(name=/196, inputs=[/194], perturbed=False)
  (/197): BoundUnsqueeze(name=/197, inputs=[/195], perturbed=False)
  (/198): BoundUnsqueeze(name=/198, inputs=[/196], perturbed=False)
  (/199): BoundConcat(name=/199, inputs=[/197, /198], perturbed=False)
  (/200): BoundReshape(name=/200, inputs=[/164, /199], perturbed=True)
  (/201): BoundConcat(name=/201, inputs=[/94, /116, /184, /192, /200, /176], perturbed=True)
  (/input.19): BoundLinear(name=/input.19, inputs=[/201, /58, /59], perturbed=True)
  (/203): BoundRelu(name=/203, inputs=[/input.19], perturbed=True)
  (/204): BoundLinear(name=/204, inputs=[/203, /60, /61], perturbed=True)
)
Split layers:
  BoundLinear(name=/input, inputs=[/92, /23, /24], perturbed=True): [(BoundRelu(name=/94, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/114, /29, /30], perturbed=True): [(BoundRelu(name=/116, inputs=[/input.3], perturbed=True), 0)]
  BoundAdd(name=/input.7, inputs=[/36, /127], perturbed=True): [(BoundRelu(name=/129, inputs=[/input.7], perturbed=True), 0)]
  BoundAdd(name=/input.11, inputs=[/42, /140], perturbed=True): [(BoundRelu(name=/142, inputs=[/input.11], perturbed=True), 0)]
  BoundAdd(name=/input.15, inputs=[/52, /162], perturbed=True): [(BoundRelu(name=/164, inputs=[/input.15], perturbed=True), 0)]
  BoundLinear(name=/input.19, inputs=[/201, /58, /59], perturbed=True): [(BoundRelu(name=/203, inputs=[/input.19], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/94, inputs=[/input], perturbed=True)
   BoundRelu(name=/116, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/129, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/142, inputs=[/input.11], perturbed=True)
   BoundRelu(name=/164, inputs=[/input.15], perturbed=True)
   BoundRelu(name=/203, inputs=[/input.19], perturbed=True)
layer /94 using sparse-features alpha with shape [0]; unstable size 0; total size 128 ([1, 128])
layer /94 start_node /input.19 using sparse-spec alpha [2, 28, 1, 0] with unstable size 27 total_size 128 output_shape torch.Size([128])
layer /94 start_node /204 using full alpha [2, 5, 1, 0] with unstable size None total_size 5 output_shape 5
layer /116 using sparse-features alpha with shape [0]; unstable size 0; total size 128 ([1, 128])
layer /116 start_node /input.19 using sparse-spec alpha [2, 28, 1, 0] with unstable size 27 total_size 128 output_shape torch.Size([128])
layer /116 start_node /204 using full alpha [2, 5, 1, 0] with unstable size None total_size 5 output_shape 5
layer /129 using sparse-features alpha with shape [94]; unstable size 94; total size 128 ([1, 1, 128])
layer /129 start_node /input.19 using sparse-spec alpha [2, 28, 1, 94] with unstable size 27 total_size 128 output_shape torch.Size([128])
layer /129 start_node /204 using full alpha [2, 5, 1, 94] with unstable size None total_size 5 output_shape 5
layer /142 using sparse-features alpha with shape [62]; unstable size 62; total size 128 ([1, 1, 128])
layer /142 start_node /input.19 using sparse-spec alpha [2, 28, 1, 62] with unstable size 27 total_size 128 output_shape torch.Size([128])
layer /142 start_node /204 using full alpha [2, 5, 1, 62] with unstable size None total_size 5 output_shape 5
layer /164 using sparse-features alpha with shape [0]; unstable size 0; total size 128 ([1, 1, 128])
layer /164 start_node /input.19 using sparse-spec alpha [2, 28, 1, 0] with unstable size 27 total_size 128 output_shape torch.Size([128])
layer /164 start_node /204 using full alpha [2, 5, 1, 0] with unstable size None total_size 5 output_shape 5
layer /203 using sparse-features alpha with shape [27]; unstable size 27; total size 128 ([1, 128])
layer /203 start_node /204 using full alpha [2, 5, 1, 27] with unstable size None total_size 5 output_shape 5
Optimizable variables initialized.
initial CROWN bounds: tensor([[ -2.23223591,  -3.82935596,  -4.10133934, -15.75410557,  -4.99878216]],
       device='cuda:0') None
best_l after optimization: -27.60251235961914
alpha/beta optimization time: 5.821755409240723
initial alpha-crown bounds: tensor([[ -0.32331741,  -3.66918206,  -3.93433332, -15.24636936,  -4.42931032]],
       device='cuda:0')
Worst class: (+ rhs) -15.246369361877441
Iteration 1

all verified at 0th iter
best_l after optimization: -50.845603942871094
alpha/beta optimization time: 0.6311349868774414
Total time: 0.6367  pickout: 0.0003 decision: 0.0008  bounding: 0.6352 add_domain: 0.0004
length of domains: 0
2 branch and bound domains visited
No domains left, verification finished!
The lower bound of last batch is -15.079458236694336
Cumulative time: 7.598225116729736

Result: unsat
Time: 10.998576402664185
